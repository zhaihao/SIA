// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package sia.message

@SerialVersionUID(0L)
final case class Person(
    name: _root_.scala.Predef.String = "",
    id: _root_.scala.Int = 0,
    email: _root_.scala.Predef.String = "",
    phone: _root_.scala.Seq[sia.message.Person.PhoneNumber] = _root_.scala.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[Person] with scalapb.lenses.Updatable[Person] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = name
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = id
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
        }
      };
      
      {
        val __value = email
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      phone.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = name
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = id
        if (__v != 0) {
          _output__.writeInt32(2, __v)
        }
      };
      {
        val __v = email
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      phone.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): sia.message.Person = {
      var __name = this.name
      var __id = this.id
      var __email = this.email
      val __phone = (_root_.scala.collection.immutable.Vector.newBuilder[sia.message.Person.PhoneNumber] ++= this.phone)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __name = _input__.readString()
          case 16 =>
            __id = _input__.readInt32()
          case 26 =>
            __email = _input__.readString()
          case 34 =>
            __phone += _root_.scalapb.LiteParser.readMessage(_input__, sia.message.Person.PhoneNumber.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      sia.message.Person(
          name = __name,
          id = __id,
          email = __email,
          phone = __phone.result()
      )
    }
    def withName(__v: _root_.scala.Predef.String): Person = copy(name = __v)
    def withId(__v: _root_.scala.Int): Person = copy(id = __v)
    def withEmail(__v: _root_.scala.Predef.String): Person = copy(email = __v)
    def clearPhone = copy(phone = _root_.scala.Seq.empty)
    def addPhone(__vs: sia.message.Person.PhoneNumber*): Person = addAllPhone(__vs)
    def addAllPhone(__vs: Iterable[sia.message.Person.PhoneNumber]): Person = copy(phone = phone ++ __vs)
    def withPhone(__v: _root_.scala.Seq[sia.message.Person.PhoneNumber]): Person = copy(phone = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = id
          if (__t != 0) __t else null
        }
        case 3 => {
          val __t = email
          if (__t != "") __t else null
        }
        case 4 => phone
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(name)
        case 2 => _root_.scalapb.descriptors.PInt(id)
        case 3 => _root_.scalapb.descriptors.PString(email)
        case 4 => _root_.scalapb.descriptors.PRepeated(phone.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = sia.message.Person
}

object Person extends scalapb.GeneratedMessageCompanion[sia.message.Person] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[sia.message.Person] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): sia.message.Person = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    sia.message.Person(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(3), Nil).asInstanceOf[_root_.scala.Seq[sia.message.Person.PhoneNumber]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[sia.message.Person] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      sia.message.Person(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[sia.message.Person.PhoneNumber]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PersonProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PersonProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 4 => __out = sia.message.Person.PhoneNumber
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.sia.message.Person.PhoneNumber
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = sia.message.Person(
  )
  sealed trait PhoneType extends _root_.scalapb.GeneratedEnum {
    type EnumType = PhoneType
    def isMobile: _root_.scala.Boolean = false
    def isHome: _root_.scala.Boolean = false
    def isWork: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[PhoneType] = sia.message.Person.PhoneType
  }
  
  object PhoneType extends _root_.scalapb.GeneratedEnumCompanion[PhoneType] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[PhoneType] = this
    @SerialVersionUID(0L)
    case object MOBILE extends PhoneType {
      val value = 0
      val index = 0
      val name = "MOBILE"
      override def isMobile: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object HOME extends PhoneType {
      val value = 1
      val index = 1
      val name = "HOME"
      override def isHome: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object WORK extends PhoneType {
      val value = 2
      val index = 2
      val name = "WORK"
      override def isWork: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends PhoneType with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.immutable.Seq(MOBILE, HOME, WORK)
    def fromValue(value: _root_.scala.Int): PhoneType = value match {
      case 0 => MOBILE
      case 1 => HOME
      case 2 => WORK
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = sia.message.Person.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = sia.message.Person.scalaDescriptor.enums(0)
  }
  @SerialVersionUID(0L)
  final case class PhoneNumber(
      number: _root_.scala.Predef.String = "",
      `type`: sia.message.Person.PhoneType = sia.message.Person.PhoneType.MOBILE
      ) extends scalapb.GeneratedMessage with scalapb.Message[PhoneNumber] with scalapb.lenses.Updatable[PhoneNumber] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = number
          if (__value != "") {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = `type`
          if (__value != sia.message.Person.PhoneType.MOBILE) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, __value.value)
          }
        };
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = number
          if (__v != "") {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = `type`
          if (__v != sia.message.Person.PhoneType.MOBILE) {
            _output__.writeEnum(2, __v.value)
          }
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): sia.message.Person.PhoneNumber = {
        var __number = this.number
        var __type = this.`type`
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __number = _input__.readString()
            case 16 =>
              __type = sia.message.Person.PhoneType.fromValue(_input__.readEnum())
            case tag => _input__.skipField(tag)
          }
        }
        sia.message.Person.PhoneNumber(
            number = __number,
            `type` = __type
        )
      }
      def withNumber(__v: _root_.scala.Predef.String): PhoneNumber = copy(number = __v)
      def withType(__v: sia.message.Person.PhoneType): PhoneNumber = copy(`type` = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = number
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = `type`.javaValueDescriptor
            if (__t.getNumber() != 0) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(number)
          case 2 => _root_.scalapb.descriptors.PEnum(`type`.scalaValueDescriptor)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = sia.message.Person.PhoneNumber
  }
  
  object PhoneNumber extends scalapb.GeneratedMessageCompanion[sia.message.Person.PhoneNumber] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[sia.message.Person.PhoneNumber] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): sia.message.Person.PhoneNumber = {
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      sia.message.Person.PhoneNumber(
        __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
        sia.message.Person.PhoneType.fromValue(__fieldsMap.getOrElse(__fields.get(1), sia.message.Person.PhoneType.MOBILE.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber)
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[sia.message.Person.PhoneNumber] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        sia.message.Person.PhoneNumber(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          sia.message.Person.PhoneType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(sia.message.Person.PhoneType.MOBILE.scalaValueDescriptor).number)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = sia.message.Person.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = sia.message.Person.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => sia.message.Person.PhoneType
      }
    }
    lazy val defaultInstance = sia.message.Person.PhoneNumber(
    )
    final val NUMBER_FIELD_NUMBER = 1
    final val TYPE_FIELD_NUMBER = 2
    def of(
      number: _root_.scala.Predef.String,
      `type`: sia.message.Person.PhoneType
    ): _root_.sia.message.Person.PhoneNumber = _root_.sia.message.Person.PhoneNumber(
      number,
      `type`
    )
  }
  
  final val NAME_FIELD_NUMBER = 1
  final val ID_FIELD_NUMBER = 2
  final val EMAIL_FIELD_NUMBER = 3
  final val PHONE_FIELD_NUMBER = 4
  def of(
    name: _root_.scala.Predef.String,
    id: _root_.scala.Int,
    email: _root_.scala.Predef.String,
    phone: _root_.scala.Seq[sia.message.Person.PhoneNumber]
  ): _root_.sia.message.Person = _root_.sia.message.Person(
    name,
    id,
    email,
    phone
  )
}

object PersonProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    scalapb.options.ScalapbProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      sia.message.Person
    )
  private lazy val ProtoBytes: Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """CgxwZXJzb24ucHJvdG8aFXNjYWxhcGIvc2NhbGFwYi5wcm90byKsAgoGUGVyc29uEh0KBG5hbWUYASABKAlCCeI/BhIEbmFtZ
  VIEbmFtZRIXCgJpZBgCIAEoBUIH4j8EEgJpZFICaWQSIAoFZW1haWwYAyABKAlCCuI/BxIFZW1haWxSBWVtYWlsEjUKBXBob25lG
  AQgAygLMhMuUGVyc29uLlBob25lTnVtYmVyQgriPwcSBXBob25lUgVwaG9uZRpkCgtQaG9uZU51bWJlchIjCgZudW1iZXIYASABK
  AlCC+I/CBIGbnVtYmVyUgZudW1iZXISMAoEdHlwZRgCIAEoDjIRLlBlcnNvbi5QaG9uZVR5cGVCCeI/BhIEdHlwZVIEdHlwZSIrC
  glQaG9uZVR5cGUSCgoGTU9CSUxFEAASCAoESE9NRRABEggKBFdPUksQAkIa4j8XCgtzaWEubWVzc2FnZRABKAFYAGAAaABiBnByb
  3RvMw=="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, Array(
      scalapb.options.ScalapbProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}